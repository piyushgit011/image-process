apiVersion: v1
kind: Namespace
metadata:
  name: image-processing-pipeline
  labels:
    name: image-processing-pipeline
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: pipeline-config
  namespace: image-processing-pipeline
data:
  config.json: |
    {
      "redis_url": "redis://redis-cluster:6379",
      "aws_config": {
        "aws_access_key_id": "${AWS_ACCESS_KEY_ID}",
        "aws_secret_access_key": "${AWS_SECRET_ACCESS_KEY}",
        "region_name": "us-east-1",
        "bucket_name": "image-processing-bucket"
      },
      "num_workers": 5,
      "max_queue_size": 1000
    }
---
apiVersion: v1
kind: Secret
metadata:
  name: aws-credentials
  namespace: image-processing-pipeline
type: Opaque
data:
  aws-access-key-id: ${AWS_ACCESS_KEY_ID_BASE64}
  aws-secret-access-key: ${AWS_SECRET_ACCESS_KEY_BASE64}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-server
  namespace: image-processing-pipeline
  labels:
    app: image-processing-pipeline
    component: api-server
spec:
  replicas: 3
  selector:
    matchLabels:
      app: image-processing-pipeline
      component: api-server
  template:
    metadata:
      labels:
        app: image-processing-pipeline
        component: api-server
    spec:
      containers:
      - name: api-server
        image: image-processing-api:latest
        ports:
        - containerPort: 8000
          name: http
        env:
        - name: DATABASE_URL
          value: "mysql+pymysql://pipeline_user:secure_password_123@mysql:3306/image_processing"
        - name: REDIS_URL
          value: "redis://redis-cluster:6379"
        - name: AWS_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              name: aws-credentials
              key: aws-access-key-id
        - name: AWS_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: aws-credentials
              key: aws-secret-access-key
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 5
          periodSeconds: 5
        volumeMounts:
        - name: config-volume
          mountPath: /app/config
      volumes:
      - name: config-volume
        configMap:
          name: pipeline-config
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: processing-workers
  namespace: image-processing-pipeline
  labels:
    app: image-processing-pipeline
    component: processing-workers
spec:
  replicas: 5
  selector:
    matchLabels:
      app: image-processing-pipeline
      component: processing-workers
  template:
    metadata:
      labels:
        app: image-processing-pipeline
        component: processing-workers
    spec:
      containers:
      - name: processing-worker
        image: image-processing-worker:latest
        env:
        - name: DATABASE_URL
          value: "mysql+pymysql://pipeline_user:secure_password_123@mysql:3306/image_processing"
        - name: REDIS_URL
          value: "redis://redis-cluster:6379"
        - name: AWS_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              name: aws-credentials
              key: aws-access-key-id
        - name: AWS_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: aws-credentials
              key: aws-secret-access-key
        resources:
          requests:
            memory: "8Gi"
            cpu: "4"
          limits:
            memory: "16Gi"
            cpu: "8"
        livenessProbe:
          exec:
            command:
            - python
            - -c
            - "import requests; requests.get('http://localhost:8000/health')"
          initialDelaySeconds: 60
          periodSeconds: 30
        volumeMounts:
        - name: models-volume
          mountPath: /app/models
        - name: config-volume
          mountPath: /app/config
      volumes:
      - name: models-volume
        persistentVolumeClaim:
          claimName: models-pvc
      - name: config-volume
        configMap:
          name: pipeline-config
---
apiVersion: v1
kind: Service
metadata:
  name: api-server-service
  namespace: image-processing-pipeline
  labels:
    app: image-processing-pipeline
    component: api-server
spec:
  type: LoadBalancer
  ports:
  - port: 80
    targetPort: 8000
    protocol: TCP
    name: http
  selector:
    app: image-processing-pipeline
    component: api-server
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: api-server-hpa
  namespace: image-processing-pipeline
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: api-server
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: processing-workers-hpa
  namespace: image-processing-pipeline
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: processing-workers
  minReplicas: 5
  maxReplicas: 20
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 75
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: models-pvc
  namespace: image-processing-pipeline
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 100Gi
  storageClassName: fast-ssd
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis-cluster
  namespace: image-processing-pipeline
  labels:
    app: redis-cluster
spec:
  serviceName: redis-cluster
  replicas: 3
  selector:
    matchLabels:
      app: redis-cluster
  template:
    metadata:
      labels:
        app: redis-cluster
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        ports:
        - containerPort: 6379
          name: redis
        command:
        - redis-server
        - /etc/redis/redis.conf
        volumeMounts:
        - name: redis-config
          mountPath: /etc/redis
        - name: redis-data
          mountPath: /data
        resources:
          requests:
            memory: "2Gi"
            cpu: "500m"
          limits:
            memory: "4Gi"
            cpu: "1000m"
        livenessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: redis-config
        configMap:
          name: redis-config
      - name: redis-data
        persistentVolumeClaim:
          claimName: redis-data-pvc
  volumeClaimTemplates:
  - metadata:
      name: redis-data-pvc
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 10Gi
---
apiVersion: v1
kind: Service
metadata:
  name: redis-cluster
  namespace: image-processing-pipeline
  labels:
    app: redis-cluster
spec:
  ports:
  - port: 6379
    targetPort: 6379
    protocol: TCP
    name: redis
  selector:
    app: redis-cluster
  clusterIP: None
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: redis-config
  namespace: image-processing-pipeline
data:
  redis.conf: |
    bind 0.0.0.0
    port 6379
    timeout 0
    tcp-keepalive 300
    daemonize no
    supervised no
    pidfile /var/run/redis_6379.pid
    loglevel notice
    logfile ""
    databases 16
    save 900 1
    save 300 10
    save 60 10000
    stop-writes-on-bgsave-error yes
    rdbcompression yes
    rdbchecksum yes
    dbfilename dump.rdb
    dir /data
    slave-serve-stale-data yes
    slave-read-only yes
    repl-diskless-sync no
    repl-diskless-sync-delay 5
    repl-ping-slave-period 10
    repl-timeout 60
    repl-disable-tcp-nodelay no
    slave-priority 100
    maxmemory 3gb
    maxmemory-policy allkeys-lru
    appendonly yes
    appendfilename "appendonly.aof"
    appendfsync everysec
    no-appendfsync-on-rewrite no
    auto-aof-rewrite-percentage 100
    auto-aof-rewrite-min-size 64mb
    aof-load-truncated yes
    aof-use-rdb-preamble yes
    lua-time-limit 5000
    slowlog-log-slower-than 10000
    slowlog-max-len 128
    latency-monitor-threshold 0
    notify-keyspace-events ""
    hash-max-ziplist-entries 512
    hash-max-ziplist-value 64
    list-max-ziplist-size -2
    list-compress-depth 0
    set-max-intset-entries 512
    zset-max-ziplist-entries 128
    zset-max-ziplist-value 64
    hll-sparse-max-bytes 3000
    activerehashing yes
    client-output-buffer-limit normal 0 0 0
    client-output-buffer-limit slave 256mb 64mb 60
    client-output-buffer-limit pubsub 32mb 8mb 60
    hz 10
    aof-rewrite-incremental-fsync yes
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: pipeline-network-policy
  namespace: image-processing-pipeline
spec:
  podSelector:
    matchLabels:
      app: image-processing-pipeline
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: image-processing-pipeline
    ports:
    - protocol: TCP
      port: 8000
  egress:
  - to:
    - namespaceSelector:
        matchLabels:
          name: image-processing-pipeline
    ports:
    - protocol: TCP
      port: 6379
  - to: []
    ports:
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 80
---
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: pipeline-monitor
  namespace: image-processing-pipeline
spec:
  selector:
    matchLabels:
      app: image-processing-pipeline
  endpoints:
  - port: http
    path: /metrics
    interval: 30s
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-rules
  namespace: image-processing-pipeline
data:
  pipeline-rules.yaml: |
    groups:
    - name: pipeline.rules
      rules:
      - alert: HighQueueDepth
        expr: queue_depth > 800
        for: 5m
        labels:
          severity: warning
        annotations:
          summary: "High queue depth detected"
          description: "Queue depth is {{ $value }} items"
      
      - alert: ProcessingFailure
        expr: processing_failures > 10
        for: 2m
        labels:
          severity: critical
        annotations:
          summary: "High processing failure rate"
          description: "{{ $value }} processing failures detected"
      
      - alert: LowThroughput
        expr: throughput_jobs_per_minute < 20
        for: 5m
        labels:
          severity: warning
        annotations:
          summary: "Low processing throughput"
          description: "Throughput is {{ $value }} jobs/minute" 