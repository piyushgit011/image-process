version: '3.8'

services:
  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: image-processing-mysql
    ports:
      - "3306:3306"
    environment:
      MYSQL_ROOT_PASSWORD: root_password_123
      MYSQL_DATABASE: image_processing
      MYSQL_USER: pipeline_user
      MYSQL_PASSWORD: secure_password_123
      MYSQL_CHARACTER_SET_SERVER: utf8mb4
      MYSQL_COLLATION_SERVER: utf8mb4_unicode_ci
    volumes:
      - mysql_data:/var/lib/mysql
      - ./mysql-init:/docker-entrypoint-initdb.d
    networks:
      - pipeline-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "pipeline_user", "-psecure_password_123"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # Redis Cluster for Queue Management
  redis:
    image: redis:7-alpine
    container_name: image-processing-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    environment:
      - REDIS_PASSWORD=your_redis_password
    networks:
      - pipeline-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # API Server
  api-server:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: image-processing-api
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=mysql+pymysql://pipeline_user:secure_password_123@mysql:3306/image_processing
      - REDIS_URL=redis://redis:6379
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_REGION=${AWS_REGION:-us-east-1}
      - S3_BUCKET=${S3_BUCKET:-image-processing-bucket}
      - LOG_LEVEL=INFO
    volumes:
      - ./models:/app/models
      - ./logs:/app/logs
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - pipeline-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Processing Workers
  processing-worker-1:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: image-processing-worker-1
    environment:
      - DATABASE_URL=mysql+pymysql://pipeline_user:secure_password_123@mysql:3306/image_processing
      - REDIS_URL=redis://redis:6379
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_REGION=${AWS_REGION:-us-east-1}
      - S3_BUCKET=${S3_BUCKET:-image-processing-bucket}
      - WORKER_ID=worker-1
      - LOG_LEVEL=INFO
    volumes:
      - ./models:/app/models
      - ./logs:/app/logs
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - pipeline-network
    restart: unless-stopped
    command: ["python", "worker.py"]

  processing-worker-2:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: image-processing-worker-2
    environment:
      - DATABASE_URL=mysql+pymysql://pipeline_user:secure_password_123@mysql:3306/image_processing
      - REDIS_URL=redis://redis:6379
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_REGION=${AWS_REGION:-us-east-1}
      - S3_BUCKET=${S3_BUCKET:-image-processing-bucket}
      - WORKER_ID=worker-2
      - LOG_LEVEL=INFO
    volumes:
      - ./models:/app/models
      - ./logs:/app/logs
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - pipeline-network
    restart: unless-stopped
    command: ["python", "worker.py"]

  processing-worker-3:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: image-processing-worker-3
    environment:
      - DATABASE_URL=mysql+pymysql://pipeline_user:secure_password_123@mysql:3306/image_processing
      - REDIS_URL=redis://redis:6379
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_REGION=${AWS_REGION:-us-east-1}
      - S3_BUCKET=${S3_BUCKET:-image-processing-bucket}
      - WORKER_ID=worker-3
      - LOG_LEVEL=INFO
    volumes:
      - ./models:/app/models
      - ./logs:/app/logs
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - pipeline-network
    restart: unless-stopped
    command: ["python", "worker.py"]

  # Monitoring Stack
  prometheus:
    image: prom/prometheus:latest
    container_name: image-processing-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - pipeline-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: image-processing-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - pipeline-network
    restart: unless-stopped

  # Load Testing Tool
  k6:
    image: grafana/k6:latest
    container_name: image-processing-k6
    ports:
      - "6565:6565"
    environment:
      - K6_OUT=influxdb=http://influxdb:8086/k6
    volumes:
      - ./load-tests:/scripts
    networks:
      - pipeline-network
    command: ["k6", "run", "/scripts/load-test.js"]

  # InfluxDB for K6 metrics
  influxdb:
    image: influxdb:1.8
    container_name: image-processing-influxdb
    ports:
      - "8086:8086"
    environment:
      - INFLUXDB_DB=k6
      - INFLUXDB_ADMIN_USER=admin
      - INFLUXDB_ADMIN_PASSWORD=admin
    volumes:
      - influxdb_data:/var/lib/influxdb
    networks:
      - pipeline-network
    restart: unless-stopped

volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  influxdb_data:
    driver: local

networks:
  pipeline-network:
    driver: bridge 